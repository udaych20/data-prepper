/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'java'
}

dependencies {
    implementation project(':data-prepper-api')
    implementation project(':data-prepper-plugins:buffer-common')
    implementation 'org.apache.kafka:kafka-clients:3.4.0'
    implementation 'org.apache.avro:avro:1.11.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'io.micrometer:micrometer-core'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'io.confluent:kafka-avro-serializer:7.3.3'
    implementation 'io.confluent:kafka-schema-registry-client:7.3.3'
    implementation 'io.confluent:kafka-avro-serializer:7.3.3'
    implementation 'io.confluent:kafka-schema-registry-client:7.3.3'
    implementation 'io.confluent:kafka-schema-registry:7.3.3:tests'
    testImplementation 'org.mockito:mockito-inline:4.1.0'
    testImplementation 'org.yaml:snakeyaml:2.0'
    testImplementation testLibs.spring.test
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    testImplementation project(':data-prepper-test-common')
    testImplementation project(':data-prepper-plugins:blocking-buffer')
    testImplementation project(':data-prepper-core')
    testImplementation 'org.mockito:mockito-inline:4.1.0'
    testImplementation 'org.apache.kafka:kafka_2.13:3.4.0'
    testImplementation 'org.apache.kafka:kafka_2.13:3.4.0:test'
    testImplementation 'org.apache.curator:curator-test:5.5.0'
    testImplementation 'io.confluent:kafka-schema-registry:7.4.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.apache.kafka:kafka-clients:3.4.0:test'
    testImplementation 'org.apache.kafka:connect-json:3.4.0'
}

test {
    useJUnitPlatform()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        //resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs

    useJUnitPlatform()

    filter {
        includeTestsMatching '*IT'
    }
}

